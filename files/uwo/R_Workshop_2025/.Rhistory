View(int)
View(int1)
int1 <- marginaleffects::predictions(
mod1, vcov = vcov1,
variables = "proportional",
by="middleclass",
comparison = "difference") |>
mutate(model = "Income group")
View(int1)
int1 <- marginaleffects::predictions(
mod1, vcov = vcov1,
variables = "middleclass",
by="proportional",
comparison = "difference") |>
mutate(model = "Income group")
View(int1)
int1 <- marginaleffects::predictions(
mod1, vcov = vcov1,
variables = list("middleclass"=1),
by="proportional",
comparison = "difference") |>
mutate(model = "Income group")
View(int1)
marginaleffects::predictions(
mod1, vcov = vcov1,
variables = list("middleclass"=1),
by="proportional",
comparison = "difference")
int1 <- marginaleffects::avg_comparisons(
mod1, vcov = vcov1,
variables = "proportional",
by="middleclass",
comparison = "difference") |>
mutate(model = "Income group")
View(int1)
int2 <- marginaleffects::avg_comparisons(
mod2, vcov = vcov2,
variables = "proportional",
by="middleclass",
comparison = "difference") |>
mutate(model = "Aggregate-level controls")
int3 <- marginaleffects::avg_comparisons(
mod3, vcov = vcov3, ,
variables = "proportional",
by="middleclass",
comparison = "difference") |>
mutate(model = "Individual-level controls")
int <- rbind(int1,int2,int3) |>
filter(middleclass==1) |>
mutate(term="middleclass:proportional") |>
select(term,estimate,conf.low,conf.high,model)
#### 2.3 Merging ####
gdat <- rbind(fd,int) |>
mutate(term = factor(term, levels = c("middleclass","proportional",
"middleclass:proportional","upperclass",
"gini_r","rile_left_r","leftright",
"age_r","female","degree"),
labels = c("Middle income","PR",
"Middle income * PR","Upper income",
"Gini","Socialdemocrats' LR ideology",
"Left-right ideol.","Age","Female","University degree")),
model = factor(model, levels = c("Income group",
"Aggregate-level controls",
"Individual-level controls")))
#### 3. Figures ####
#### 3.1 Figure 1 ####
ggplot(gdat,aes(x=estimate*100,y=fct_rev(term),color=model,shape=model)) +
geom_vline(xintercept=0,color="#B02539")+
geom_pointrange(aes(xmin = conf.high*100, xmax = conf.low*100),
position=position_dodge2(width=.8, reverse=T)) +
scale_x_continuous("Estimated probability of voting for the right (%)")+
scale_color_manual(values=c("#285F17","#EC5429","#27456B"))+
theme_minimal() +
theme(axis.title.y=element_blank(),
legend.title=element_blank())
fd <- rbind(fd1,fd2,fd3)  |>
mutate(term = factor(term, levels = c("middleclass","proportional","upperclass",
"gini_r","rile_left_r","leftright",
"age_r","female","degree"),
labels = c("Middle income","PR","Upper income",
"Gini","Socialdemocrats' LR ideology",
"Left-right ideol.","Age","Female","University degree")),
model = factor(model, levels = c("Income group",
"Aggregate-level controls",
"Individual-level controls")))
#### 3. Figures ####
#### 3.1 Figure 1 ####
ggplot(gdat,aes(x=estimate*100,y=fct_rev(term),color=model,shape=model)) +
geom_vline(xintercept=0,color="#B02539")+
geom_pointrange(aes(xmin = conf.high*100, xmax = conf.low*100),
position=position_dodge2(width=.8, reverse=T)) +
scale_x_continuous("Estimated probability of voting for the right (%)")+
scale_color_manual(values=c("#285F17","#EC5429","#27456B"))+
theme_minimal() +
theme(axis.title.y=element_blank(),
legend.title=element_blank())
#### 3. Figures ####
#### 3.1 Figure 1 ####
ggplot(fd,aes(x=estimate*100,y=fct_rev(term),color=model,shape=model)) +
geom_vline(xintercept=0,color="#B02539")+
geom_pointrange(aes(xmin = conf.high*100, xmax = conf.low*100),
position=position_dodge2(width=.8, reverse=T)) +
scale_x_continuous("Estimated probability of voting for the right (%)")+
scale_color_manual(values=c("#285F17","#EC5429","#27456B"))+
theme_minimal() +
theme(axis.title.y=element_blank(),
legend.title=element_blank())
options(htmltools.dir.version = FALSE)
knitr::opts_chunk$set(
fig.width=9, fig.height=3.5, fig.retina=3,
out.width = "100%",
cache = FALSE,
echo = FALSE,
message = FALSE,
warning = FALSE,
hiline = TRUE
)
xaringanExtra::use_panelset()
# Logical
Durian <- TRUE
class(Durian)
# What happens when you add Apple and Banana?
# What about Apple and Durian?
# What about Apple and Cherry?
Apple + Banana
# Logical
Durian <- TRUE
class(Durian)
# What happens when you add Apple and Banana?
# What about Apple and Durian?
# What about Apple and Cherry?
# Integer
Apple <- 13L
class(Apple)
# Numeric
Banana <- 13
class(Banana)
# Character
Cherry <- "13"
class(Cherry)
# Logical
Durian <- TRUE
class(Durian)
# What happens when you add Apple and Banana?
# What about Apple and Durian?
# What about Apple and Cherry?
Apple + Banana
Apple + Durian
Apple + Cherry
knitr::include_graphics("images/hw_eye.png")
#### Why c() ?
stuff <- c("Knickknacks","Kerfuffle","Kumquat")
(scoreOfWordsThatStartsWithK_1 <- 8:10)
# OR
(scoreOfWordsThatStartsWithK_2 <- c(8,9,10))
#### What if I want the score from 0 to 100 instead of 0 to 10?
(scoreOfWordsThatStartsWithK_3 <- 10*scoreOfWordsThatStartsWithK_2)
#### What if I want to relate the names to the score?
(names(scoreOfWordsThatStartsWithK_1) <- stuff)
# Like adding a second dimension to the data!
# Like adding a second dimension to the data!
scoreOfWordsThatStartsWithK_1
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
library(tidyverse)
library(rio)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
dat <- import("../data/MajBenRight_clean_orig.dta")
range(dat$year)
unique(dat$year)
table(dat$year)
sub <- dat |> filter(year>2010)
sub <- dat |> filter(year>2010 & IMD1009==10)
mod1 <- glm(right_bis ~ middleclass*proportional + upperclass + factor(year),
family=binomial, data=sub)
# Cluster robust se on study variable
vcov1 <- sandwich::vcovCL(mod1, cluster = ~ study)
#### 1.2 Model 2 - Controls macro ####
mod2 <- glm(right_bis ~ middleclass*proportional + upperclass + factor(year) +
gini_r + rile_left_r,
family=binomial, data=sub)
# Cluster robust se on study variable
vcov2 <- sandwich::vcovCL(mod2, cluster = ~ study)
#### 1.3 Model 3 - Controls micro ####
mod3 <- glm(right_bis ~ middleclass*proportional + upperclass + factor(year) +
gini_r + rile_left_r + leftright + age_r + female + degree,
family=binomial, data=sub)
# Cluster robust se on study variable
vcov3 <- sandwich::vcovCL(mod3, cluster = ~ study)
#### 2. Analysis ####
#### 2.1 First differences ####
fd1 <- marginaleffects::avg_comparisons(
mod1, vcov = vcov1,
variables = c("middleclass","proportional","upperclass"),
comparison = "difference") |>
mutate(model = "Income group")
fd2 <- marginaleffects::avg_comparisons(
mod2, vcov = vcov2,
variables = c("middleclass","proportional","upperclass",
"gini_r","rile_left_r"),
comparison = "difference") |>
mutate(model = "Aggregate-level controls")
fd3 <- marginaleffects::avg_comparisons(
mod3, vcov = vcov3,
variables = c("middleclass","proportional","upperclass",
"gini_r","rile_left_r","leftright",
"age_r","female","degree"),
comparison = "difference") |>
mutate(model = "Individual-level controls")
fd <- rbind(fd1,fd2,fd3)  |>
mutate(term = factor(term, levels = c("middleclass","proportional","upperclass",
"gini_r","rile_left_r","leftright",
"age_r","female","degree"),
labels = c("Middle income","PR","Upper income",
"Gini","Socialdemocrats' LR ideology",
"Left-right ideol.","Age","Female","University degree")),
model = factor(model, levels = c("Income group",
"Aggregate-level controls",
"Individual-level controls")))
#### 3. Figures ####
#### 3.1 Figure 1 ####
ggplot(fd,aes(x=estimate*100,y=fct_rev(term),color=model,shape=model)) +
geom_vline(xintercept=0,color="#B02539")+
geom_pointrange(aes(xmin = conf.high*100, xmax = conf.low*100),
position=position_dodge2(width=.8, reverse=T)) +
scale_x_continuous("First difference in probability of voting for the right (%)")+
scale_color_manual(values=c("#285F17","#EC5429","#27456B"))+
theme_minimal() +
theme(axis.title.y=element_blank(),
legend.title=element_blank())
export(sub,"../data/MajBenRight_clean_2010plus.dta")
dat <- import("../data/MajBenRight_clean_2010plus.dta.dta")
dat <- import("../data/MajBenRight_clean_2010plus.dta")
names(dat)
mean(dat$age)
mean(dat$age,na.rm=T)
?import
# Check number of rows and columns
dim(dat)
# Check number of columns
ncol(dat)
dim(scoreOfWordsThatStartsWithK_3)
options(htmltools.dir.version = FALSE)
knitr::opts_chunk$set(
fig.width=9, fig.height=3.5, fig.retina=3,
out.width = "100%",
cache = FALSE,
echo = FALSE,
message = FALSE,
warning = FALSE,
hiline = TRUE
)
xaringanExtra::use_panelset()
library(xaringanthemer)
style_duo_accent(
primary_color = "#4F2683",
secondary_color = "#201436",
inverse_header_color = "#ffffff",
inverse_background_color = "#4F2683",
inverse_text_color = "#ffffff"
)
knitr::include_graphics("images/social-science/PNG/SSC_Horiz_Rev.png")
knitr::include_graphics("gifs/giphy.gif")
knitr::include_graphics("images/Rlogo.png")
knitr::include_graphics("images/RStudio_logo_flat.svg")
knitr::include_graphics("images/Microsoft_Office_Word.svg")
knitr::include_graphics("images/eye.gif")
knitr::include_graphics("images/Rlogo.png")
knitr::include_graphics("images/R_down_mac.png")
knitr::include_graphics("images/R_down_mac2.png")
knitr::include_graphics("images/R_down_pc.png")
knitr::include_graphics("images/R_down_pc2.png")
knitr::include_graphics("images/R_down_pc3.png")
knitr::include_graphics("images/rstudio_down_mac.png")
knitr::include_graphics("images/RStudio_overview.png")
knitr::include_graphics("images/RStudio_editor.png")
knitr::include_graphics("images/HelloWorld.png")
knitr::include_graphics("images/housekeeping1.png")
knitr::include_graphics("images/housekeeping3.png")
knitr::include_graphics("images/housekeeping4.png")
knitr::include_graphics("images/filer.gif")
knitr::include_graphics("images/tidyverse.png")
knitr::include_graphics("images/repli1.png")
knitr::include_graphics("images/repli2.png")
# The right way
banana <- 3
# The wrong way
banana = 3
# Global assigner
banana <<- 3
# FOR ENGLISH KEYBOARDS
# PC: alt + -
# MAC: option + -
banana
# The right way
banana <- 3
# The wrong way
banana = 3
# Global assigner
banana <<- 3
# FOR ENGLISH KEYBOARDS
# PC: alt + -
# MAC: option + -
banana
knitr::include_graphics("images/hw_eye.png")
# Integer
Apple <- 13L
class(Apple)
# Numeric
Banana <- 13
class(Banana)
# Character
Cherry <- "13"
class(Cherry)
# Logical
Durian <- TRUE
class(Durian)
# What happens when you add Apple and Banana?
# What about Apple and Durian?
# What about Apple and Cherry?
# Integer
Apple <- 13L
class(Apple)
# Numeric
Banana <- 13
class(Banana)
# Character
Cherry <- "13"
class(Cherry)
# Logical
Durian <- TRUE
class(Durian)
# What happens when you add Apple and Banana?
# What about Apple and Durian?
# What about Apple and Cherry?
Apple + Banana
Apple + Durian
# One data type allowed. R's basic data structure.
# A vector
stuff <- "Kumquat"
stuff
# Also a vector
stuff <- c("Knickknacks","Kerfuffle","Kumquat")
stuff
# Also a vector
(otherStuff <- c(T,F,T,T,T,F)) # Parenthesis around assignment prints the new object.
#### Why c() ?
stuff <- c("Knickknacks","Kerfuffle","Kumquat")
(scoreOfWordsThatStartsWithK_1 <- 8:10)
# OR
(scoreOfWordsThatStartsWithK_2 <- c(8,9,10))
#### What if I want the score from 0 to 100 instead of 0 to 10?
(scoreOfWordsThatStartsWithK_3 <- 10*scoreOfWordsThatStartsWithK_2)
#### What if I want to relate the names to the score?
names(scoreOfWordsThatStartsWithK_1) <- stuff
# Like adding a second dimension to the data!
scoreOfWordsThatStartsWithK_1
# Again, only one data type. 2 dimensions of it this time.
(myMatrix <- matrix(1:9,nrow=3,ncol=3))
# Accepts all operations that matrices accept in math
# Like transpose for example
t(myMatrix)
# Works with characters as well!
letterMatrix <- matrix(letters,ncol=2)
t(letterMatrix)
#### What if I want multiple data types?
# One data type per column, essentially a collection of vectors, i.e. an excel sheet.
(wordData <- data.frame(stuff,scoreOfWordsThatStartsWithK_2))
#### How do I change the column names?
colnames(wordData) <- c("word","score")
# OR
(wordData <- data.frame(word=stuff,
score=scoreOfWordsThatStartsWithK_2))
#### What happens if I do this?
# class(wordData)
# Anything you want. Can mix object type and data structures.
(myList <- list(stuff,t(letterMatrix),wordData))
#### What is a function?
myFunction <- function(stuff_in){
# Some operation
return(stuff_out)
}
my_mean <- function(vector){
tmp <- sum(vector)
n <- length(vector)
out <- round(tmp/n,2)
return(out)
}
normalVec <- rnorm(1000,mean=0,sd=1)
mean(normalVec)
my_mean(normalVec)
library(tidyverse)
library(rio)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
dat <- import("../data/MajBenRight_clean_2010plus.dta")
class(dat$polity)
class(dat)
# Check number of rows and columns
dim(dat)
dim(scoreOfWordsThatStartsWithK_3)
scoreOfWordsThatStartsWithK_3
dim(scoreOfWordsThatStartsWithK_1)
# For vector length
length(scoreOfWordsThatStartsWithK_1)
head(dat)
unique(dat$polity)
# Check unique values of a vector
head(unique(dat$polity))
# Check unique values of a vector and how often they appear
table(dat$right)
# Check unique values of a vector and how often they appear
table(dat$leftright)
# Can create crosstabs from it!
table(dat$leftright,dat$female)
# Can create crosstabs from it!
table(dat$female,dat$leftright)
dat$year
# $ is used to select columns from dataframe by name
years <- dat$year[sample(1:nrow(dat),20)]
years
# Remember, a vector has one dimension
# So if I want to know what the second value is, I only need one position.
year[2]
# Let's start with a vector.
# I create one by sampling from the years of dat.
# Notice that I used $ to select the column year, I'll come back to this.
years <- dat$year[sample(1:nrow(dat),20)]
# Remember, a vector has one dimension
# So if I want to know what the second value is, I only need one position.
years[2]
# Let's start with a vector.
# I create one by sampling from the years of dat.
# Notice that I used $ to select the column year, I'll come back to this.
(years <- dat$year[sample(1:nrow(dat),20)])
# Remember, a vector has one dimension
# So if I want to know what the second value is, I only need one position.
years[2]
# Let's start with a vector.
# I create one by sampling from the years of dat.
# Notice that I used $ to select the column year, I'll come back to this.
(years <- dat$year[sample(1:nrow(dat),10)])
# Remember, a vector has one dimension
# So if I want to know what the second value is, I only need one position.
years[2]
# But I can also select multiple elements from the vector
years[c(1,5,10)]
# Matrices and dataframes have 2 dimensions, so you need two things to find
# what you are looking for, a row and a column number!
# In that order [r,c]
# Let's create as toy example from dat
sub <- dat[sample(1:nrow(dat),10),] |> select(polity,proportional)
sub
# Matrices and dataframes have 2 dimensions, so you need two things to find
# what you are looking for, a row and a column number!
# In that order [r,c]
# Let's create as toy example from dat
sub <- dat[sample(1:nrow(dat),10),] |> select(polity,proportional,year)
sub
# Matrices and dataframes have 2 dimensions, so you need two things to find
# what you are looking for, a row and a column number!
# In that order [r,c]
# Let's create as toy example from dat
(sub <- dat[sample(1:nrow(dat),3),] |> select(polity,proportional,year))
# If I only want to know about the first column
sub[,1]
# If I only want to know about the third row
sub[3,]
# Or what is in the second row of the first column
sub[2,1]
# Or even what is in the second column from the end
sub[,-2]
# Or even what is in the second column from the end
sub[,-1]
# If I know the names of the columns however
names(sub)
# Or what is in the second row of the first column
sub[2,1]
# Then I can do this
sub$polity[2]
2%%3
2/3
2%%3
4%%2
sub$year[1]-sub$year[2]
sub$year[1]-sub$year[2]
table(dat$year)
names(dat)
which(names(dat)=="year")
which(names(dat)=="polity")
which(names(dat)=="proportional")
tmp <- dat[,c(390,391,633)]
subset <- tmp[subset$year==2015 & subset$proportional==0,]
View(tmp)
subset <- tmp[tmp$year==2015 & tmp$proportional==0,]
View(subset)
# In tidyverse world
dat |>
select(polity,year,proportional) |>
filter(year==2015 & proportional == 0) |>
unique(polity)
dat |>
select(polity,year,proportional) |>
filter(year==2015 & proportional == 0)
# In tidyverse world
dat |>
select(polity,year,proportional) |>
filter(year==2015 & proportional == 0) |>
distinct(polity)
unique(subset$polity)
library(tidyverse)
library(rio)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
cses <- import("../data/cses_imd.dta")
